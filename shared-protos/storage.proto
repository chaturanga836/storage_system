syntax = "proto3";

package storage;

// Service definition for tenant node operations
service TenantNode {
    // Data operations
    rpc WriteData(WriteDataRequest) returns (WriteDataResponse);
    rpc SearchData(SearchDataRequest) returns (stream SearchDataResponse);
    rpc AggregateData(AggregateDataRequest) returns (AggregateDataResponse);
    
    // Source management
    rpc AddSource(AddSourceRequest) returns (AddSourceResponse);
    rpc RemoveSource(RemoveSourceRequest) returns (RemoveSourceResponse);
    rpc ListSources(ListSourcesRequest) returns (ListSourcesResponse);
    rpc GetSourceStats(GetSourceStatsRequest) returns (GetSourceStatsResponse);
    
    // Tenant operations
    rpc GetTenantStats(GetTenantStatsRequest) returns (GetTenantStatsResponse);
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Data write request
message WriteDataRequest {
    string source_id = 1;
    repeated DataRecord records = 2;
    repeated string partition_columns = 3;
    map<string, string> metadata = 4;
}

message DataRecord {
    map<string, Value> fields = 1;
}

message Value {
    oneof value {
        string string_value = 1;
        int64 int_value = 2;
        double double_value = 3;
        bool bool_value = 4;
        bytes bytes_value = 5;
    }
}

message WriteDataResponse {
    bool success = 1;
    string write_id = 2;
    string error_message = 3;
    int32 rows_written = 4;
}

// Data search request
message SearchDataRequest {
    repeated string source_ids = 1;  // Empty means all sources
    map<string, FilterCondition> filters = 2;
    int32 limit = 3;
    int32 offset = 4;
    repeated string select_columns = 5;
}

message FilterCondition {
    oneof condition {
        string eq = 1;          // Equal
        string ne = 2;          // Not equal
        string gt = 3;          // Greater than
        string lt = 4;          // Less than
        string gte = 5;         // Greater than or equal
        string lte = 6;         // Less than or equal
        StringList in = 7;      // In list
        StringList not_in = 8;  // Not in list
        string like = 9;        // Like pattern
        string regex = 10;      // Regex pattern
    }
}

message StringList {
    repeated string values = 1;
}

message SearchDataResponse {
    string source_id = 1;
    repeated DataRecord records = 2;
    bool has_more = 3;
    int32 total_rows = 4;
    string error_message = 5;
}

// Aggregation request
message AggregateDataRequest {
    repeated string source_ids = 1;  // Empty means all sources
    map<string, FilterCondition> filters = 2;
    repeated AggregationSpec aggregations = 3;
}

message AggregationSpec {
    string type = 1;        // count, sum, avg, min, max
    string column = 2;      // Column to aggregate (not needed for count)
    string alias = 3;       // Alias for the result
}

message AggregateDataResponse {
    bool success = 1;
    string tenant_id = 2;
    map<string, AggregationResult> source_results = 3;
    map<string, double> final_results = 4;
    string error_message = 5;
}

message AggregationResult {
    map<string, double> values = 1;
    string error_message = 2;
}

// Source management messages
message SourceConfig {
    string source_id = 1;
    string name = 2;
    string connection_string = 3;
    string data_path = 4;
    map<string, string> schema_definition = 5;
    repeated string partition_columns = 6;
    repeated string index_columns = 7;
    string compression = 8;
    int32 max_file_size_mb = 9;
    bool wal_enabled = 10;
}

message AddSourceRequest {
    SourceConfig config = 1;
}

message AddSourceResponse {
    bool success = 1;
    string error_message = 2;
}

message RemoveSourceRequest {
    string source_id = 1;
}

message RemoveSourceResponse {
    bool success = 1;
    string error_message = 2;
}

message ListSourcesRequest {
    // Empty for now
}

message ListSourcesResponse {
    repeated string source_ids = 1;
    map<string, SourceInfo> source_details = 2;
}

message SourceInfo {
    string source_id = 1;
    string name = 2;
    int64 total_files = 3;
    int64 total_size_bytes = 4;
    int64 total_rows = 5;
    string last_updated = 6;
}

message GetSourceStatsRequest {
    string source_id = 1;
}

message GetSourceStatsResponse {
    bool success = 1;
    SourceInfo stats = 2;
    map<string, string> detailed_stats = 3;
    string error_message = 4;
}

// Tenant operations
message GetTenantStatsRequest {
    // Empty for now
}

message GetTenantStatsResponse {
    string tenant_id = 1;
    string tenant_name = 2;
    int32 total_sources = 3;
    int64 total_files = 4;
    int64 total_size_bytes = 5;
    int64 total_rows = 6;
    map<string, SourceInfo> source_stats = 7;
}

message HealthCheckRequest {
    // Empty for now
}

message HealthCheckResponse {
    bool healthy = 1;
    string status = 2;
    map<string, string> details = 3;
}
