version: '3.8'

services:
  # Storage System Services
  ingestion-server:
    build:
      context: ../..
      dockerfile: deployments/docker/Dockerfile.ingestion-server
    ports:
      - "8080:8080"
      - "9090:9090"
    environment:
      - CONFIG_PATH=/app/configs/ingestion-server.yaml
      - LOG_LEVEL=info
      - POSTGRES_URL=postgres://postgres:password@postgres:5432/storage_system?sslmode=disable
      - KAFKA_BROKERS=kafka:9092
      - S3_ENDPOINT=minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
    depends_on:
      - postgres
      - kafka
      - minio
    volumes:
      - ./configs:/app/configs
    networks:
      - storage-network
    restart: unless-stopped

  query-server:
    build:
      context: ../..
      dockerfile: deployments/docker/Dockerfile.query-server
    ports:
      - "8081:8081"
      - "9091:9091"
    environment:
      - CONFIG_PATH=/app/configs/query-server.yaml
      - LOG_LEVEL=info
      - POSTGRES_URL=postgres://postgres:password@postgres:5432/storage_system?sslmode=disable
      - S3_ENDPOINT=minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
    depends_on:
      - postgres
      - minio
    volumes:
      - ./configs:/app/configs
    networks:
      - storage-network
    restart: unless-stopped

  data-processor:
    build:
      context: ../..
      dockerfile: deployments/docker/Dockerfile.data-processor
    ports:
      - "8082:8082"
      - "9092:9092"
    environment:
      - CONFIG_PATH=/app/configs/data-processor.yaml
      - LOG_LEVEL=info
      - POSTGRES_URL=postgres://postgres:password@postgres:5432/storage_system?sslmode=disable
      - KAFKA_BROKERS=kafka:9092
      - S3_ENDPOINT=minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
    depends_on:
      - postgres
      - kafka
      - minio
    volumes:
      - ./configs:/app/configs
    networks:
      - storage-network
    restart: unless-stopped

  # Dependencies
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=storage_system
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - storage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - storage-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - storage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    volumes:
      - minio_data:/data
    networks:
      - storage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - storage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - storage-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - storage-network
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - storage-network
    restart: unless-stopped

# Networks
networks:
  storage-network:
    driver: bridge

# Volumes
volumes:
  postgres_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  minio_data:
  redis_data:
  prometheus_data:
  grafana_data:
