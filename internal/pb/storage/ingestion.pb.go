// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: storage/ingestion.proto

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request to ingest a single record
type IngestRecordRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Record        *DataRecord            `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	Options       map[string]string      `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestRecordRequest) Reset() {
	*x = IngestRecordRequest{}
	mi := &file_storage_ingestion_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestRecordRequest) ProtoMessage() {}

func (x *IngestRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_ingestion_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestRecordRequest.ProtoReflect.Descriptor instead.
func (*IngestRecordRequest) Descriptor() ([]byte, []int) {
	return file_storage_ingestion_proto_rawDescGZIP(), []int{0}
}

func (x *IngestRecordRequest) GetRecord() *DataRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *IngestRecordRequest) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

// Response for single record ingestion
type IngestRecordResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RecordId      string                 `protobuf:"bytes,2,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	Version       int64                  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestRecordResponse) Reset() {
	*x = IngestRecordResponse{}
	mi := &file_storage_ingestion_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestRecordResponse) ProtoMessage() {}

func (x *IngestRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_ingestion_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestRecordResponse.ProtoReflect.Descriptor instead.
func (*IngestRecordResponse) Descriptor() ([]byte, []int) {
	return file_storage_ingestion_proto_rawDescGZIP(), []int{1}
}

func (x *IngestRecordResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *IngestRecordResponse) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *IngestRecordResponse) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *IngestRecordResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Request to ingest multiple records
type IngestBatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       []*DataRecord          `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	Options       map[string]string      `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Transactional bool                   `protobuf:"varint,3,opt,name=transactional,proto3" json:"transactional,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestBatchRequest) Reset() {
	*x = IngestBatchRequest{}
	mi := &file_storage_ingestion_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestBatchRequest) ProtoMessage() {}

func (x *IngestBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_ingestion_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestBatchRequest.ProtoReflect.Descriptor instead.
func (*IngestBatchRequest) Descriptor() ([]byte, []int) {
	return file_storage_ingestion_proto_rawDescGZIP(), []int{2}
}

func (x *IngestBatchRequest) GetRecords() []*DataRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *IngestBatchRequest) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *IngestBatchRequest) GetTransactional() bool {
	if x != nil {
		return x.Transactional
	}
	return false
}

// Response for batch ingestion
type IngestBatchResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Status          *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	SuccessfulCount int32                  `protobuf:"varint,2,opt,name=successful_count,json=successfulCount,proto3" json:"successful_count,omitempty"`
	FailedCount     int32                  `protobuf:"varint,3,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`
	Results         []*IngestResult        `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty"`
	Timestamp       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *IngestBatchResponse) Reset() {
	*x = IngestBatchResponse{}
	mi := &file_storage_ingestion_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestBatchResponse) ProtoMessage() {}

func (x *IngestBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_ingestion_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestBatchResponse.ProtoReflect.Descriptor instead.
func (*IngestBatchResponse) Descriptor() ([]byte, []int) {
	return file_storage_ingestion_proto_rawDescGZIP(), []int{3}
}

func (x *IngestBatchResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *IngestBatchResponse) GetSuccessfulCount() int32 {
	if x != nil {
		return x.SuccessfulCount
	}
	return 0
}

func (x *IngestBatchResponse) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *IngestBatchResponse) GetResults() []*IngestResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *IngestBatchResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Individual ingestion result
type IngestResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RecordId      string                 `protobuf:"bytes,2,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	Version       int64                  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestResult) Reset() {
	*x = IngestResult{}
	mi := &file_storage_ingestion_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestResult) ProtoMessage() {}

func (x *IngestResult) ProtoReflect() protoreflect.Message {
	mi := &file_storage_ingestion_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestResult.ProtoReflect.Descriptor instead.
func (*IngestResult) Descriptor() ([]byte, []int) {
	return file_storage_ingestion_proto_rawDescGZIP(), []int{4}
}

func (x *IngestResult) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *IngestResult) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *IngestResult) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *IngestResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Streaming ingestion request
type IngestStreamRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*IngestStreamRequest_Init
	//	*IngestStreamRequest_Record
	//	*IngestStreamRequest_Commit
	Request       isIngestStreamRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestStreamRequest) Reset() {
	*x = IngestStreamRequest{}
	mi := &file_storage_ingestion_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestStreamRequest) ProtoMessage() {}

func (x *IngestStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_ingestion_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestStreamRequest.ProtoReflect.Descriptor instead.
func (*IngestStreamRequest) Descriptor() ([]byte, []int) {
	return file_storage_ingestion_proto_rawDescGZIP(), []int{5}
}

func (x *IngestStreamRequest) GetRequest() isIngestStreamRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *IngestStreamRequest) GetInit() *StreamInit {
	if x != nil {
		if x, ok := x.Request.(*IngestStreamRequest_Init); ok {
			return x.Init
		}
	}
	return nil
}

func (x *IngestStreamRequest) GetRecord() *DataRecord {
	if x != nil {
		if x, ok := x.Request.(*IngestStreamRequest_Record); ok {
			return x.Record
		}
	}
	return nil
}

func (x *IngestStreamRequest) GetCommit() *StreamCommit {
	if x != nil {
		if x, ok := x.Request.(*IngestStreamRequest_Commit); ok {
			return x.Commit
		}
	}
	return nil
}

type isIngestStreamRequest_Request interface {
	isIngestStreamRequest_Request()
}

type IngestStreamRequest_Init struct {
	Init *StreamInit `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type IngestStreamRequest_Record struct {
	Record *DataRecord `protobuf:"bytes,2,opt,name=record,proto3,oneof"`
}

type IngestStreamRequest_Commit struct {
	Commit *StreamCommit `protobuf:"bytes,3,opt,name=commit,proto3,oneof"`
}

func (*IngestStreamRequest_Init) isIngestStreamRequest_Request() {}

func (*IngestStreamRequest_Record) isIngestStreamRequest_Request() {}

func (*IngestStreamRequest_Commit) isIngestStreamRequest_Request() {}

// Stream initialization
type StreamInit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      *TenantID              `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Schema        *SchemaID              `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Options       map[string]string      `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamInit) Reset() {
	*x = StreamInit{}
	mi := &file_storage_ingestion_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInit) ProtoMessage() {}

func (x *StreamInit) ProtoReflect() protoreflect.Message {
	mi := &file_storage_ingestion_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInit.ProtoReflect.Descriptor instead.
func (*StreamInit) Descriptor() ([]byte, []int) {
	return file_storage_ingestion_proto_rawDescGZIP(), []int{6}
}

func (x *StreamInit) GetTenantId() *TenantID {
	if x != nil {
		return x.TenantId
	}
	return nil
}

func (x *StreamInit) GetSchema() *SchemaID {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *StreamInit) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

// Stream commit
type StreamCommit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ForceFlush    bool                   `protobuf:"varint,1,opt,name=force_flush,json=forceFlush,proto3" json:"force_flush,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamCommit) Reset() {
	*x = StreamCommit{}
	mi := &file_storage_ingestion_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCommit) ProtoMessage() {}

func (x *StreamCommit) ProtoReflect() protoreflect.Message {
	mi := &file_storage_ingestion_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCommit.ProtoReflect.Descriptor instead.
func (*StreamCommit) Descriptor() ([]byte, []int) {
	return file_storage_ingestion_proto_rawDescGZIP(), []int{7}
}

func (x *StreamCommit) GetForceFlush() bool {
	if x != nil {
		return x.ForceFlush
	}
	return false
}

// Streaming ingestion response
type IngestStreamResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*IngestStreamResponse_Ack
	//	*IngestStreamResponse_Error
	//	*IngestStreamResponse_Stats
	Response      isIngestStreamResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestStreamResponse) Reset() {
	*x = IngestStreamResponse{}
	mi := &file_storage_ingestion_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestStreamResponse) ProtoMessage() {}

func (x *IngestStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_ingestion_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestStreamResponse.ProtoReflect.Descriptor instead.
func (*IngestStreamResponse) Descriptor() ([]byte, []int) {
	return file_storage_ingestion_proto_rawDescGZIP(), []int{8}
}

func (x *IngestStreamResponse) GetResponse() isIngestStreamResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *IngestStreamResponse) GetAck() *StreamAck {
	if x != nil {
		if x, ok := x.Response.(*IngestStreamResponse_Ack); ok {
			return x.Ack
		}
	}
	return nil
}

func (x *IngestStreamResponse) GetError() *StreamError {
	if x != nil {
		if x, ok := x.Response.(*IngestStreamResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *IngestStreamResponse) GetStats() *StreamStats {
	if x != nil {
		if x, ok := x.Response.(*IngestStreamResponse_Stats); ok {
			return x.Stats
		}
	}
	return nil
}

type isIngestStreamResponse_Response interface {
	isIngestStreamResponse_Response()
}

type IngestStreamResponse_Ack struct {
	Ack *StreamAck `protobuf:"bytes,1,opt,name=ack,proto3,oneof"`
}

type IngestStreamResponse_Error struct {
	Error *StreamError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type IngestStreamResponse_Stats struct {
	Stats *StreamStats `protobuf:"bytes,3,opt,name=stats,proto3,oneof"`
}

func (*IngestStreamResponse_Ack) isIngestStreamResponse_Response() {}

func (*IngestStreamResponse_Error) isIngestStreamResponse_Response() {}

func (*IngestStreamResponse_Stats) isIngestStreamResponse_Response() {}

// Stream acknowledgment
type StreamAck struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RecordId       string                 `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	Version        int64                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	SequenceNumber int64                  `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StreamAck) Reset() {
	*x = StreamAck{}
	mi := &file_storage_ingestion_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAck) ProtoMessage() {}

func (x *StreamAck) ProtoReflect() protoreflect.Message {
	mi := &file_storage_ingestion_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAck.ProtoReflect.Descriptor instead.
func (*StreamAck) Descriptor() ([]byte, []int) {
	return file_storage_ingestion_proto_rawDescGZIP(), []int{9}
}

func (x *StreamAck) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *StreamAck) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StreamAck) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// Stream error
type StreamError struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Status         *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	SequenceNumber int64                  `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StreamError) Reset() {
	*x = StreamError{}
	mi := &file_storage_ingestion_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamError) ProtoMessage() {}

func (x *StreamError) ProtoReflect() protoreflect.Message {
	mi := &file_storage_ingestion_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamError.ProtoReflect.Descriptor instead.
func (*StreamError) Descriptor() ([]byte, []int) {
	return file_storage_ingestion_proto_rawDescGZIP(), []int{10}
}

func (x *StreamError) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *StreamError) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// Stream statistics
type StreamStats struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	RecordsReceived  int64                  `protobuf:"varint,1,opt,name=records_received,json=recordsReceived,proto3" json:"records_received,omitempty"`
	RecordsProcessed int64                  `protobuf:"varint,2,opt,name=records_processed,json=recordsProcessed,proto3" json:"records_processed,omitempty"`
	BytesReceived    int64                  `protobuf:"varint,3,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	LastUpdate       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StreamStats) Reset() {
	*x = StreamStats{}
	mi := &file_storage_ingestion_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamStats) ProtoMessage() {}

func (x *StreamStats) ProtoReflect() protoreflect.Message {
	mi := &file_storage_ingestion_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamStats.ProtoReflect.Descriptor instead.
func (*StreamStats) Descriptor() ([]byte, []int) {
	return file_storage_ingestion_proto_rawDescGZIP(), []int{11}
}

func (x *StreamStats) GetRecordsReceived() int64 {
	if x != nil {
		return x.RecordsReceived
	}
	return 0
}

func (x *StreamStats) GetRecordsProcessed() int64 {
	if x != nil {
		return x.RecordsProcessed
	}
	return 0
}

func (x *StreamStats) GetBytesReceived() int64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *StreamStats) GetLastUpdate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

// Request for ingestion status
type IngestionStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TenantId      *TenantID              `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestionStatusRequest) Reset() {
	*x = IngestionStatusRequest{}
	mi := &file_storage_ingestion_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestionStatusRequest) ProtoMessage() {}

func (x *IngestionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_ingestion_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestionStatusRequest.ProtoReflect.Descriptor instead.
func (*IngestionStatusRequest) Descriptor() ([]byte, []int) {
	return file_storage_ingestion_proto_rawDescGZIP(), []int{12}
}

func (x *IngestionStatusRequest) GetTenantId() *TenantID {
	if x != nil {
		return x.TenantId
	}
	return nil
}

// Response with ingestion status
type IngestionStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Metrics       *IngestionMetrics      `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestionStatusResponse) Reset() {
	*x = IngestionStatusResponse{}
	mi := &file_storage_ingestion_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestionStatusResponse) ProtoMessage() {}

func (x *IngestionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_ingestion_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestionStatusResponse.ProtoReflect.Descriptor instead.
func (*IngestionStatusResponse) Descriptor() ([]byte, []int) {
	return file_storage_ingestion_proto_rawDescGZIP(), []int{13}
}

func (x *IngestionStatusResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *IngestionStatusResponse) GetMetrics() *IngestionMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *IngestionStatusResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Ingestion metrics
type IngestionMetrics struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	TotalRecordsIngested int64                  `protobuf:"varint,1,opt,name=total_records_ingested,json=totalRecordsIngested,proto3" json:"total_records_ingested,omitempty"`
	RecordsPerSecond     int64                  `protobuf:"varint,2,opt,name=records_per_second,json=recordsPerSecond,proto3" json:"records_per_second,omitempty"`
	BytesPerSecond       int64                  `protobuf:"varint,3,opt,name=bytes_per_second,json=bytesPerSecond,proto3" json:"bytes_per_second,omitempty"`
	ActiveStreams        int64                  `protobuf:"varint,4,opt,name=active_streams,json=activeStreams,proto3" json:"active_streams,omitempty"`
	PendingRecords       int64                  `protobuf:"varint,5,opt,name=pending_records,json=pendingRecords,proto3" json:"pending_records,omitempty"`
	FailedRecords        int64                  `protobuf:"varint,6,opt,name=failed_records,json=failedRecords,proto3" json:"failed_records,omitempty"`
	AvgLatencyMs         float64                `protobuf:"fixed64,7,opt,name=avg_latency_ms,json=avgLatencyMs,proto3" json:"avg_latency_ms,omitempty"`
	P99LatencyMs         float64                `protobuf:"fixed64,8,opt,name=p99_latency_ms,json=p99LatencyMs,proto3" json:"p99_latency_ms,omitempty"`
	WalSizeBytes         int64                  `protobuf:"varint,9,opt,name=wal_size_bytes,json=walSizeBytes,proto3" json:"wal_size_bytes,omitempty"`
	MemtableCount        int64                  `protobuf:"varint,10,opt,name=memtable_count,json=memtableCount,proto3" json:"memtable_count,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *IngestionMetrics) Reset() {
	*x = IngestionMetrics{}
	mi := &file_storage_ingestion_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestionMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestionMetrics) ProtoMessage() {}

func (x *IngestionMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_storage_ingestion_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestionMetrics.ProtoReflect.Descriptor instead.
func (*IngestionMetrics) Descriptor() ([]byte, []int) {
	return file_storage_ingestion_proto_rawDescGZIP(), []int{14}
}

func (x *IngestionMetrics) GetTotalRecordsIngested() int64 {
	if x != nil {
		return x.TotalRecordsIngested
	}
	return 0
}

func (x *IngestionMetrics) GetRecordsPerSecond() int64 {
	if x != nil {
		return x.RecordsPerSecond
	}
	return 0
}

func (x *IngestionMetrics) GetBytesPerSecond() int64 {
	if x != nil {
		return x.BytesPerSecond
	}
	return 0
}

func (x *IngestionMetrics) GetActiveStreams() int64 {
	if x != nil {
		return x.ActiveStreams
	}
	return 0
}

func (x *IngestionMetrics) GetPendingRecords() int64 {
	if x != nil {
		return x.PendingRecords
	}
	return 0
}

func (x *IngestionMetrics) GetFailedRecords() int64 {
	if x != nil {
		return x.FailedRecords
	}
	return 0
}

func (x *IngestionMetrics) GetAvgLatencyMs() float64 {
	if x != nil {
		return x.AvgLatencyMs
	}
	return 0
}

func (x *IngestionMetrics) GetP99LatencyMs() float64 {
	if x != nil {
		return x.P99LatencyMs
	}
	return 0
}

func (x *IngestionMetrics) GetWalSizeBytes() int64 {
	if x != nil {
		return x.WalSizeBytes
	}
	return 0
}

func (x *IngestionMetrics) GetMemtableCount() int64 {
	if x != nil {
		return x.MemtableCount
	}
	return 0
}

var File_storage_ingestion_proto protoreflect.FileDescriptor

const file_storage_ingestion_proto_rawDesc = "" +
	"\n" +
	"\x17storage/ingestion.proto\x12\astorage\x1a\x14storage/common.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xc3\x01\n" +
	"\x13IngestRecordRequest\x12+\n" +
	"\x06record\x18\x01 \x01(\v2\x13.storage.DataRecordR\x06record\x12C\n" +
	"\aoptions\x18\x02 \x03(\v2).storage.IngestRecordRequest.OptionsEntryR\aoptions\x1a:\n" +
	"\fOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb0\x01\n" +
	"\x14IngestRecordResponse\x12'\n" +
	"\x06status\x18\x01 \x01(\v2\x0f.storage.StatusR\x06status\x12\x1b\n" +
	"\trecord_id\x18\x02 \x01(\tR\brecordId\x12\x18\n" +
	"\aversion\x18\x03 \x01(\x03R\aversion\x128\n" +
	"\ttimestamp\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"\xe9\x01\n" +
	"\x12IngestBatchRequest\x12-\n" +
	"\arecords\x18\x01 \x03(\v2\x13.storage.DataRecordR\arecords\x12B\n" +
	"\aoptions\x18\x02 \x03(\v2(.storage.IngestBatchRequest.OptionsEntryR\aoptions\x12$\n" +
	"\rtransactional\x18\x03 \x01(\bR\rtransactional\x1a:\n" +
	"\fOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xf7\x01\n" +
	"\x13IngestBatchResponse\x12'\n" +
	"\x06status\x18\x01 \x01(\v2\x0f.storage.StatusR\x06status\x12)\n" +
	"\x10successful_count\x18\x02 \x01(\x05R\x0fsuccessfulCount\x12!\n" +
	"\ffailed_count\x18\x03 \x01(\x05R\vfailedCount\x12/\n" +
	"\aresults\x18\x04 \x03(\v2\x15.storage.IngestResultR\aresults\x128\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"\x93\x01\n" +
	"\fIngestResult\x12'\n" +
	"\x06status\x18\x01 \x01(\v2\x0f.storage.StatusR\x06status\x12\x1b\n" +
	"\trecord_id\x18\x02 \x01(\tR\brecordId\x12\x18\n" +
	"\aversion\x18\x03 \x01(\x03R\aversion\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessage\"\xab\x01\n" +
	"\x13IngestStreamRequest\x12)\n" +
	"\x04init\x18\x01 \x01(\v2\x13.storage.StreamInitH\x00R\x04init\x12-\n" +
	"\x06record\x18\x02 \x01(\v2\x13.storage.DataRecordH\x00R\x06record\x12/\n" +
	"\x06commit\x18\x03 \x01(\v2\x15.storage.StreamCommitH\x00R\x06commitB\t\n" +
	"\arequest\"\xdf\x01\n" +
	"\n" +
	"StreamInit\x12.\n" +
	"\ttenant_id\x18\x01 \x01(\v2\x11.storage.TenantIDR\btenantId\x12)\n" +
	"\x06schema\x18\x02 \x01(\v2\x11.storage.SchemaIDR\x06schema\x12:\n" +
	"\aoptions\x18\x03 \x03(\v2 .storage.StreamInit.OptionsEntryR\aoptions\x1a:\n" +
	"\fOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"/\n" +
	"\fStreamCommit\x12\x1f\n" +
	"\vforce_flush\x18\x01 \x01(\bR\n" +
	"forceFlush\"\xa6\x01\n" +
	"\x14IngestStreamResponse\x12&\n" +
	"\x03ack\x18\x01 \x01(\v2\x12.storage.StreamAckH\x00R\x03ack\x12,\n" +
	"\x05error\x18\x02 \x01(\v2\x14.storage.StreamErrorH\x00R\x05error\x12,\n" +
	"\x05stats\x18\x03 \x01(\v2\x14.storage.StreamStatsH\x00R\x05statsB\n" +
	"\n" +
	"\bresponse\"k\n" +
	"\tStreamAck\x12\x1b\n" +
	"\trecord_id\x18\x01 \x01(\tR\brecordId\x12\x18\n" +
	"\aversion\x18\x02 \x01(\x03R\aversion\x12'\n" +
	"\x0fsequence_number\x18\x03 \x01(\x03R\x0esequenceNumber\"_\n" +
	"\vStreamError\x12'\n" +
	"\x06status\x18\x01 \x01(\v2\x0f.storage.StatusR\x06status\x12'\n" +
	"\x0fsequence_number\x18\x02 \x01(\x03R\x0esequenceNumber\"\xc9\x01\n" +
	"\vStreamStats\x12)\n" +
	"\x10records_received\x18\x01 \x01(\x03R\x0frecordsReceived\x12+\n" +
	"\x11records_processed\x18\x02 \x01(\x03R\x10recordsProcessed\x12%\n" +
	"\x0ebytes_received\x18\x03 \x01(\x03R\rbytesReceived\x12;\n" +
	"\vlast_update\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"lastUpdate\"H\n" +
	"\x16IngestionStatusRequest\x12.\n" +
	"\ttenant_id\x18\x01 \x01(\v2\x11.storage.TenantIDR\btenantId\"\xb1\x01\n" +
	"\x17IngestionStatusResponse\x12'\n" +
	"\x06status\x18\x01 \x01(\v2\x0f.storage.StatusR\x06status\x123\n" +
	"\ametrics\x18\x02 \x01(\v2\x19.storage.IngestionMetricsR\ametrics\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"\xb0\x03\n" +
	"\x10IngestionMetrics\x124\n" +
	"\x16total_records_ingested\x18\x01 \x01(\x03R\x14totalRecordsIngested\x12,\n" +
	"\x12records_per_second\x18\x02 \x01(\x03R\x10recordsPerSecond\x12(\n" +
	"\x10bytes_per_second\x18\x03 \x01(\x03R\x0ebytesPerSecond\x12%\n" +
	"\x0eactive_streams\x18\x04 \x01(\x03R\ractiveStreams\x12'\n" +
	"\x0fpending_records\x18\x05 \x01(\x03R\x0ependingRecords\x12%\n" +
	"\x0efailed_records\x18\x06 \x01(\x03R\rfailedRecords\x12$\n" +
	"\x0eavg_latency_ms\x18\a \x01(\x01R\favgLatencyMs\x12$\n" +
	"\x0ep99_latency_ms\x18\b \x01(\x01R\fp99LatencyMs\x12$\n" +
	"\x0ewal_size_bytes\x18\t \x01(\x03R\fwalSizeBytes\x12%\n" +
	"\x0ememtable_count\x18\n" +
	" \x01(\x03R\rmemtableCount2\x9d\x03\n" +
	"\x10IngestionService\x12K\n" +
	"\fIngestRecord\x12\x1c.storage.IngestRecordRequest\x1a\x1d.storage.IngestRecordResponse\x12H\n" +
	"\vIngestBatch\x12\x1b.storage.IngestBatchRequest\x1a\x1c.storage.IngestBatchResponse\x12O\n" +
	"\fIngestStream\x12\x1c.storage.IngestStreamRequest\x1a\x1d.storage.IngestStreamResponse(\x010\x01\x12W\n" +
	"\x12GetIngestionStatus\x12\x1f.storage.IngestionStatusRequest\x1a .storage.IngestionStatusResponse\x12H\n" +
	"\vHealthCheck\x12\x1b.storage.HealthCheckRequest\x1a\x1c.storage.HealthCheckResponseB\n" +
	"Z\b/storageb\x06proto3"

var (
	file_storage_ingestion_proto_rawDescOnce sync.Once
	file_storage_ingestion_proto_rawDescData []byte
)

func file_storage_ingestion_proto_rawDescGZIP() []byte {
	file_storage_ingestion_proto_rawDescOnce.Do(func() {
		file_storage_ingestion_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_storage_ingestion_proto_rawDesc), len(file_storage_ingestion_proto_rawDesc)))
	})
	return file_storage_ingestion_proto_rawDescData
}

var file_storage_ingestion_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_storage_ingestion_proto_goTypes = []any{
	(*IngestRecordRequest)(nil),     // 0: storage.IngestRecordRequest
	(*IngestRecordResponse)(nil),    // 1: storage.IngestRecordResponse
	(*IngestBatchRequest)(nil),      // 2: storage.IngestBatchRequest
	(*IngestBatchResponse)(nil),     // 3: storage.IngestBatchResponse
	(*IngestResult)(nil),            // 4: storage.IngestResult
	(*IngestStreamRequest)(nil),     // 5: storage.IngestStreamRequest
	(*StreamInit)(nil),              // 6: storage.StreamInit
	(*StreamCommit)(nil),            // 7: storage.StreamCommit
	(*IngestStreamResponse)(nil),    // 8: storage.IngestStreamResponse
	(*StreamAck)(nil),               // 9: storage.StreamAck
	(*StreamError)(nil),             // 10: storage.StreamError
	(*StreamStats)(nil),             // 11: storage.StreamStats
	(*IngestionStatusRequest)(nil),  // 12: storage.IngestionStatusRequest
	(*IngestionStatusResponse)(nil), // 13: storage.IngestionStatusResponse
	(*IngestionMetrics)(nil),        // 14: storage.IngestionMetrics
	nil,                             // 15: storage.IngestRecordRequest.OptionsEntry
	nil,                             // 16: storage.IngestBatchRequest.OptionsEntry
	nil,                             // 17: storage.StreamInit.OptionsEntry
	(*DataRecord)(nil),              // 18: storage.DataRecord
	(*Status)(nil),                  // 19: storage.Status
	(*timestamppb.Timestamp)(nil),   // 20: google.protobuf.Timestamp
	(*TenantID)(nil),                // 21: storage.TenantID
	(*SchemaID)(nil),                // 22: storage.SchemaID
	(*HealthCheckRequest)(nil),      // 23: storage.HealthCheckRequest
	(*HealthCheckResponse)(nil),     // 24: storage.HealthCheckResponse
}
var file_storage_ingestion_proto_depIdxs = []int32{
	18, // 0: storage.IngestRecordRequest.record:type_name -> storage.DataRecord
	15, // 1: storage.IngestRecordRequest.options:type_name -> storage.IngestRecordRequest.OptionsEntry
	19, // 2: storage.IngestRecordResponse.status:type_name -> storage.Status
	20, // 3: storage.IngestRecordResponse.timestamp:type_name -> google.protobuf.Timestamp
	18, // 4: storage.IngestBatchRequest.records:type_name -> storage.DataRecord
	16, // 5: storage.IngestBatchRequest.options:type_name -> storage.IngestBatchRequest.OptionsEntry
	19, // 6: storage.IngestBatchResponse.status:type_name -> storage.Status
	4,  // 7: storage.IngestBatchResponse.results:type_name -> storage.IngestResult
	20, // 8: storage.IngestBatchResponse.timestamp:type_name -> google.protobuf.Timestamp
	19, // 9: storage.IngestResult.status:type_name -> storage.Status
	6,  // 10: storage.IngestStreamRequest.init:type_name -> storage.StreamInit
	18, // 11: storage.IngestStreamRequest.record:type_name -> storage.DataRecord
	7,  // 12: storage.IngestStreamRequest.commit:type_name -> storage.StreamCommit
	21, // 13: storage.StreamInit.tenant_id:type_name -> storage.TenantID
	22, // 14: storage.StreamInit.schema:type_name -> storage.SchemaID
	17, // 15: storage.StreamInit.options:type_name -> storage.StreamInit.OptionsEntry
	9,  // 16: storage.IngestStreamResponse.ack:type_name -> storage.StreamAck
	10, // 17: storage.IngestStreamResponse.error:type_name -> storage.StreamError
	11, // 18: storage.IngestStreamResponse.stats:type_name -> storage.StreamStats
	19, // 19: storage.StreamError.status:type_name -> storage.Status
	20, // 20: storage.StreamStats.last_update:type_name -> google.protobuf.Timestamp
	21, // 21: storage.IngestionStatusRequest.tenant_id:type_name -> storage.TenantID
	19, // 22: storage.IngestionStatusResponse.status:type_name -> storage.Status
	14, // 23: storage.IngestionStatusResponse.metrics:type_name -> storage.IngestionMetrics
	20, // 24: storage.IngestionStatusResponse.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 25: storage.IngestionService.IngestRecord:input_type -> storage.IngestRecordRequest
	2,  // 26: storage.IngestionService.IngestBatch:input_type -> storage.IngestBatchRequest
	5,  // 27: storage.IngestionService.IngestStream:input_type -> storage.IngestStreamRequest
	12, // 28: storage.IngestionService.GetIngestionStatus:input_type -> storage.IngestionStatusRequest
	23, // 29: storage.IngestionService.HealthCheck:input_type -> storage.HealthCheckRequest
	1,  // 30: storage.IngestionService.IngestRecord:output_type -> storage.IngestRecordResponse
	3,  // 31: storage.IngestionService.IngestBatch:output_type -> storage.IngestBatchResponse
	8,  // 32: storage.IngestionService.IngestStream:output_type -> storage.IngestStreamResponse
	13, // 33: storage.IngestionService.GetIngestionStatus:output_type -> storage.IngestionStatusResponse
	24, // 34: storage.IngestionService.HealthCheck:output_type -> storage.HealthCheckResponse
	30, // [30:35] is the sub-list for method output_type
	25, // [25:30] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_storage_ingestion_proto_init() }
func file_storage_ingestion_proto_init() {
	if File_storage_ingestion_proto != nil {
		return
	}
	file_storage_common_proto_init()
	file_storage_ingestion_proto_msgTypes[5].OneofWrappers = []any{
		(*IngestStreamRequest_Init)(nil),
		(*IngestStreamRequest_Record)(nil),
		(*IngestStreamRequest_Commit)(nil),
	}
	file_storage_ingestion_proto_msgTypes[8].OneofWrappers = []any{
		(*IngestStreamResponse_Ack)(nil),
		(*IngestStreamResponse_Error)(nil),
		(*IngestStreamResponse_Stats)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storage_ingestion_proto_rawDesc), len(file_storage_ingestion_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_storage_ingestion_proto_goTypes,
		DependencyIndexes: file_storage_ingestion_proto_depIdxs,
		MessageInfos:      file_storage_ingestion_proto_msgTypes,
	}.Build()
	File_storage_ingestion_proto = out.File
	file_storage_ingestion_proto_goTypes = nil
	file_storage_ingestion_proto_depIdxs = nil
}
