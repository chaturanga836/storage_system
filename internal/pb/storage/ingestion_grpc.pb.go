// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: storage/ingestion.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IngestionService_IngestRecord_FullMethodName       = "/storage.IngestionService/IngestRecord"
	IngestionService_IngestBatch_FullMethodName        = "/storage.IngestionService/IngestBatch"
	IngestionService_IngestStream_FullMethodName       = "/storage.IngestionService/IngestStream"
	IngestionService_GetIngestionStatus_FullMethodName = "/storage.IngestionService/GetIngestionStatus"
	IngestionService_HealthCheck_FullMethodName        = "/storage.IngestionService/HealthCheck"
)

// IngestionServiceClient is the client API for IngestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngestionServiceClient interface {
	// Ingest a single record
	IngestRecord(ctx context.Context, in *IngestRecordRequest, opts ...grpc.CallOption) (*IngestRecordResponse, error)
	// Ingest multiple records in a batch
	IngestBatch(ctx context.Context, in *IngestBatchRequest, opts ...grpc.CallOption) (*IngestBatchResponse, error)
	// Stream records for high-throughput ingestion
	IngestStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[IngestStreamRequest, IngestStreamResponse], error)
	// Get ingestion status and metrics
	GetIngestionStatus(ctx context.Context, in *IngestionStatusRequest, opts ...grpc.CallOption) (*IngestionStatusResponse, error)
	// Health check
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type ingestionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestionServiceClient(cc grpc.ClientConnInterface) IngestionServiceClient {
	return &ingestionServiceClient{cc}
}

func (c *ingestionServiceClient) IngestRecord(ctx context.Context, in *IngestRecordRequest, opts ...grpc.CallOption) (*IngestRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestRecordResponse)
	err := c.cc.Invoke(ctx, IngestionService_IngestRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) IngestBatch(ctx context.Context, in *IngestBatchRequest, opts ...grpc.CallOption) (*IngestBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestBatchResponse)
	err := c.cc.Invoke(ctx, IngestionService_IngestBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) IngestStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[IngestStreamRequest, IngestStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IngestionService_ServiceDesc.Streams[0], IngestionService_IngestStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[IngestStreamRequest, IngestStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IngestionService_IngestStreamClient = grpc.BidiStreamingClient[IngestStreamRequest, IngestStreamResponse]

func (c *ingestionServiceClient) GetIngestionStatus(ctx context.Context, in *IngestionStatusRequest, opts ...grpc.CallOption) (*IngestionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestionStatusResponse)
	err := c.cc.Invoke(ctx, IngestionService_GetIngestionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, IngestionService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngestionServiceServer is the server API for IngestionService service.
// All implementations must embed UnimplementedIngestionServiceServer
// for forward compatibility.
type IngestionServiceServer interface {
	// Ingest a single record
	IngestRecord(context.Context, *IngestRecordRequest) (*IngestRecordResponse, error)
	// Ingest multiple records in a batch
	IngestBatch(context.Context, *IngestBatchRequest) (*IngestBatchResponse, error)
	// Stream records for high-throughput ingestion
	IngestStream(grpc.BidiStreamingServer[IngestStreamRequest, IngestStreamResponse]) error
	// Get ingestion status and metrics
	GetIngestionStatus(context.Context, *IngestionStatusRequest) (*IngestionStatusResponse, error)
	// Health check
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedIngestionServiceServer()
}

// UnimplementedIngestionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIngestionServiceServer struct{}

func (UnimplementedIngestionServiceServer) IngestRecord(context.Context, *IngestRecordRequest) (*IngestRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestRecord not implemented")
}
func (UnimplementedIngestionServiceServer) IngestBatch(context.Context, *IngestBatchRequest) (*IngestBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestBatch not implemented")
}
func (UnimplementedIngestionServiceServer) IngestStream(grpc.BidiStreamingServer[IngestStreamRequest, IngestStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method IngestStream not implemented")
}
func (UnimplementedIngestionServiceServer) GetIngestionStatus(context.Context, *IngestionStatusRequest) (*IngestionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIngestionStatus not implemented")
}
func (UnimplementedIngestionServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedIngestionServiceServer) mustEmbedUnimplementedIngestionServiceServer() {}
func (UnimplementedIngestionServiceServer) testEmbeddedByValue()                          {}

// UnsafeIngestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngestionServiceServer will
// result in compilation errors.
type UnsafeIngestionServiceServer interface {
	mustEmbedUnimplementedIngestionServiceServer()
}

func RegisterIngestionServiceServer(s grpc.ServiceRegistrar, srv IngestionServiceServer) {
	// If the following call pancis, it indicates UnimplementedIngestionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IngestionService_ServiceDesc, srv)
}

func _IngestionService_IngestRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).IngestRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_IngestRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).IngestRecord(ctx, req.(*IngestRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_IngestBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).IngestBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_IngestBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).IngestBatch(ctx, req.(*IngestBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_IngestStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngestionServiceServer).IngestStream(&grpc.GenericServerStream[IngestStreamRequest, IngestStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IngestionService_IngestStreamServer = grpc.BidiStreamingServer[IngestStreamRequest, IngestStreamResponse]

func _IngestionService_GetIngestionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).GetIngestionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_GetIngestionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).GetIngestionStatus(ctx, req.(*IngestionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IngestionService_ServiceDesc is the grpc.ServiceDesc for IngestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.IngestionService",
	HandlerType: (*IngestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngestRecord",
			Handler:    _IngestionService_IngestRecord_Handler,
		},
		{
			MethodName: "IngestBatch",
			Handler:    _IngestionService_IngestBatch_Handler,
		},
		{
			MethodName: "GetIngestionStatus",
			Handler:    _IngestionService_GetIngestionStatus_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _IngestionService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IngestStream",
			Handler:       _IngestionService_IngestStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "storage/ingestion.proto",
}
