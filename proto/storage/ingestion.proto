syntax = "proto3";

package storage;

option go_package = "storage-engine/proto/storage";

import "storage/common.proto";
import "google/protobuf/timestamp.proto";

// Ingestion service for writing data to the storage system

service IngestionService {
  // Ingest a single record
  rpc IngestRecord(IngestRecordRequest) returns (IngestRecordResponse);
  
  // Ingest multiple records in a batch
  rpc IngestBatch(IngestBatchRequest) returns (IngestBatchResponse);
  
  // Stream records for high-throughput ingestion
  rpc IngestStream(stream IngestStreamRequest) returns (stream IngestStreamResponse);
  
  // Get ingestion status and metrics
  rpc GetIngestionStatus(IngestionStatusRequest) returns (IngestionStatusResponse);
  
  // Health check
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Request to ingest a single record
message IngestRecordRequest {
  DataRecord record = 1;
  map<string, string> options = 2;
}

// Response for single record ingestion
message IngestRecordResponse {
  Status status = 1;
  string record_id = 2;
  int64 version = 3;
  google.protobuf.Timestamp timestamp = 4;
}

// Request to ingest multiple records
message IngestBatchRequest {
  repeated DataRecord records = 1;
  map<string, string> options = 2;
  bool transactional = 3;
}

// Response for batch ingestion
message IngestBatchResponse {
  Status status = 1;
  int32 successful_count = 2;
  int32 failed_count = 3;
  repeated IngestResult results = 4;
  google.protobuf.Timestamp timestamp = 5;
}

// Individual ingestion result
message IngestResult {
  Status status = 1;
  string record_id = 2;
  int64 version = 3;
  string error_message = 4;
}

// Streaming ingestion request
message IngestStreamRequest {
  oneof request {
    StreamInit init = 1;
    DataRecord record = 2;
    StreamCommit commit = 3;
  }
}

// Stream initialization
message StreamInit {
  TenantID tenant_id = 1;
  SchemaID schema = 2;
  map<string, string> options = 3;
}

// Stream commit
message StreamCommit {
  bool force_flush = 1;
}

// Streaming ingestion response
message IngestStreamResponse {
  oneof response {
    StreamAck ack = 1;
    StreamError error = 2;
    StreamStats stats = 3;
  }
}

// Stream acknowledgment
message StreamAck {
  string record_id = 1;
  int64 version = 2;
  int64 sequence_number = 3;
}

// Stream error
message StreamError {
  Status status = 1;
  int64 sequence_number = 2;
}

// Stream statistics
message StreamStats {
  int64 records_received = 1;
  int64 records_processed = 2;
  int64 bytes_received = 3;
  google.protobuf.Timestamp last_update = 4;
}

// Request for ingestion status
message IngestionStatusRequest {
  TenantID tenant_id = 1;
}

// Response with ingestion status
message IngestionStatusResponse {
  Status status = 1;
  IngestionMetrics metrics = 2;
  google.protobuf.Timestamp timestamp = 3;
}

// Ingestion metrics
message IngestionMetrics {
  int64 total_records_ingested = 1;
  int64 records_per_second = 2;
  int64 bytes_per_second = 3;
  int64 active_streams = 4;
  int64 pending_records = 5;
  int64 failed_records = 6;
  double avg_latency_ms = 7;
  double p99_latency_ms = 8;
  int64 wal_size_bytes = 9;
  int64 memtable_count = 10;
}
